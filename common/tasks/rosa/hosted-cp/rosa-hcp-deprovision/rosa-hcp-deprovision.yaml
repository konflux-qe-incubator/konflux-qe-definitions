---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: collect-artifacts-deprovision-rosa
spec:
  params:
    - name: test-name
      type: string
      description: The name of the test being executed.
    - name: ocp-login-command
      type: string
      description: Command to log in to the OpenShift cluster.
    - name: oras-container
      type: string
      description: The ORAS container registry URI to store artifacts.
    - name: pull-request-author
      type: string
      description: The GitHub username of the pull request author.
    - name: git-revision
      type: string
      description: The Git revision (commit SHA) of the current build.
    - name: pull-request-number
      type: string
      description: The number of the GitHub pull request.
    - name: git-repo
      type: string
      description: The name of the GitHub repository.
    - name: git-org
      type: string
      description: The GitHub organization or user that owns the repository.
    - name: cluster-name
      type: string
      description: The name of the OpenShift cluster to be deleted.
    - name: konflux-test-infra-secret
      type: string
      description: The name of secret where testing infrastructures credentials are stored.
    - name: cloud-credential-key
      type: string
      description: The key secret from konflux-test-infra-secret where all AWS ROSA configurations are stored.
    - name: pipeline-aggregate-status
      type: string
      description: Contains status of a pipeline(Succeeded, Failed, Completed, None)
      default: None
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: "$(params.konflux-test-infra-secret)"
    - name: oras-credentials-volume
      secret:
        secretName: oras-credentials
    - name: github-volume
      secret:
        secretName: github
  steps:
    - name: collect-artifacts
      workingDir: /workspace/cluster-artifacts
      onError: continue
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      script: |
        #!/bin/sh
        $(params.ocp-login-command)

        if [[ $(params.pipeline-aggregate-status) == "Succeeded" ]]; then
          echo "[INFO]: Pipeline finished successfully. Skipping artifacts collection..."
          exit 0
        fi

        curl -sSL https://raw.githubusercontent.com/konflux-qe-incubator/konflux-qe-definitions/onboard_rhtap_e2e/scripts/gather-extra.sh | bash
    - name: inspect-upload-artifacts
      workingDir: /workspace
      onError: continue
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  oras-credentials-volume
          mountPath: /usr/local/oras-credentials
      script: |
        #!/bin/sh

        if [[ $(params.pipeline-aggregate-status) == "Succeeded" ]]; then
          echo "[INFO]: Pipeline finished successfully. Skipping artifacts inspection..."
          exit 0
        fi

        trufflehog filesystem /workspace --only-verified --fail
        EXIT_CODE=$?

        if [ $EXIT_CODE -ne 0 ]; then
          echo "[ERROR] Found secrets in artifacts... Container artifacts will not be uploaded to oci registry due to security reasons."
          exit 0
        fi

        QUAY_USERNAME=$(cat /usr/local/oras-credentials/quay-username)
        QUAY_PASSWORD=$(cat /usr/local/oras-credentials/quay-password)
        oras login -u $QUAY_USERNAME -p $QUAY_PASSWORD quay.io

        echo '{"doc": "README.md"}' > config.json
        oras pull "$(params.oras-container)"
        oras push "$(params.oras-container)" --config config.json:application/vnd.acme.rocket.config.v1+json \
          ./:application/vnd.acme.rocket.docs.layer.v1+tar
    - name: pull-request-comment
      workingDir: /workspace
      onError: continue
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        #!/bin/sh

        export TEST_NAME="$(params.test-name)"
        export PR_AUTHOR="$(params.pull-request-author)"
        export GIT_REVISION="$(params.git-revision)"
        export ORAS_CONTAINER="$(params.oras-container)"
        export GIT_ORG="$(params.git-org)"
        export GIT_REPO="$(params.git-repo)"
        export PR_NUMBER="$(params.pull-request-number)"

        GITHUB_TOKEN=$(cat /usr/local/konflux-test-infra/github-bot-commenter-token)
        if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GITHUB_TOKEN env is not set."
            exit 1
        fi

        if [[ $(params.pipeline-aggregate-status) == "Succeeded" ]]; then
          echo "[INFO]: Pipeline finished successfully. Skipping pull request comment..."
          exit 0
        fi

        COMMENT=$(cat <<EOF
        {
          "body": "@$PR_AUTHOR: The following test finished, in case test failed say /retest to rerun all failed tests:\n\nPipelineRun name | Command\n--- | ---\n$TEST_NAME | /retest\n\nTo inspect your test artifacts make sure you have installed ORAS in your local machine. To inspect all test artifacts execute:\n\n\`\`\`shell\nmkdir -p oras-artifacts\ncd oras-artifacts\noras pull $ORAS_CONTAINER\n\`\`\`\n\nFor instructions on how to install ORAS, please refer to the [ORAS installation guide](https://oras.land/docs/installation)."
        }
        EOF
        )

        RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$COMMENT" \
            "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/$PR_NUMBER/comments")

        if echo "$RESPONSE" | grep -q '"id"'; then
            echo "[INFO] Comment posted successfully."
        else
            echo "[ERROR] Failed to post comment. Response: $RESPONSE"
        fi
    - name: deprovision-rosa
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        set -o errexit
        set -o nounset
        set -o pipefail

        export CLUSTER_NAME REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ROSA_TOKEN

        CLUSTER_NAME=$(params.cluster-name)
        REGION=$(jq -r '.aws["region"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_ACCESS_KEY_ID=$(jq -r '.aws["access-key-id"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        AWS_SECRET_ACCESS_KEY=$(jq -r '.aws["access-key-secret"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))
        ROSA_TOKEN=$(jq -r '.aws["rosa-hcp"]["rosa-token"]' /usr/local/konflux-test-infra/$(params.cloud-credential-key))

        config_aws_creds() {
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region "$REGION"
        }

        if [[ -n "$CLUSTER_NAME"  ]]; then
            echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Started to destroy cluster [$CLUSTER_NAME]..."

            printf "INFO: Logging in to your Red Hat account...\n"
            config_aws_creds
            rosa login --token="$ROSA_TOKEN"

            # Trigger the deletion of the cluster without waiting for it to be completely deleted
            rosa delete cluster --region "$REGION" --cluster="$CLUSTER_NAME" -y

        else
            echo "INFO: No OCP cluster needs to be destroyed."
        fi

        echo "INFO: [$(date +"%Y/%m/%d %H:%M:%S")] Done"
